#!/bin/bash


#  CORES E VARI√ÅVEIS GLOBAIS
# ========================
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
ORANGE='\033[38;5;208m'
NC='\033[0m'
ENV_FILE=".env"

term_width=$(tput cols)
content_width=33
box_width=$((content_width + 4))
left_pad=$(( (term_width - box_width) / 2 ))

ascii_art=(
"  ____       _   _ _   _ ____  "
" / ___|     | | | | | | | __ ) "
"| |  _ _____| |_| | | | |  _ \ "
"| |_| |_____|  _  | |_| | |_) |"
" \____|     |_| |_|\___/|____/ "
"                               "
"     GitHub Termux Manager"
)

nova_versao_disponivel=false
VERSAO_LOCAL="1.5.0"


# RET√ÇNGULO COM A ASCII
# ========================
desenhar() {
    printf "%*s" "$left_pad" ""
    printf "${CYAN}+"
    printf "%0.s-" $(seq 1 $content_width)
    printf "+\n"

    for line in "${ascii_art[@]}"; do
        printf "%*s" "$left_pad" ""
        printf "${CYAN}| ${NC}%-${content_width}s${CYAN} |\n" "$line"
    done

    printf "%*s" "$left_pad" ""
    printf "${CYAN}+"
    printf "%0.s-" $(seq 1 $content_width)
    printf "+${NC}\n"
    echo ""
}


#  LER VERS√ÉO
# ========================
ler_versao_local() {
    # N√£o faz nada
    :
}

#  ESPERAR ENTER
# ========================
esperar_enter() {
    echo ""
    echo -e "${YELLOW}üëâ Pressione ENTER para ir...${NC}"
    read
}


# MINI CARREGAMENTO
# ========================
minicarregamento() {
    clear
    steps=7
    bar_length=20

    for ((i=1; i<=steps; i++)); do
        bar=""
        filled=$(( (i * bar_length) / steps ))
        empty=$(( bar_length - filled ))

        for ((j=1; j<=filled; j++)); do
            bar+="‚ñì"
        done
        for ((j=1; j<=empty; j++)); do
            bar+="‚ñë"
        done

        echo -ne "${YELLOW}‚Ä¢ ‚åõ Carregando: [${bar}]${NC}\r"
        sleep 0.2
    done

    echo -ne "\033[2K\r"
}


# INSTALA√á√ÉO DE DEPENDENCIAS/PACOTES
# ========================
   #carregamento
carregamentodepencias() {
    total=$1
    atual=$2
    pacote_nome=$3
    largura=20
    progresso=$(( atual * 100 / total ))
    preenchido=$(( largura * progresso / 100 ))
    vazio=$(( largura - preenchido ))

    barra=$(printf "%${preenchido}s" | tr ' ' '#')
    espacos=$(printf "%${vazio}s" | tr ' ' ' ')

    if [ "$progresso" -lt 100 ]; then
        echo -ne "\r\033[K‚Ä¢ üì¶ Instalando ${pacote_nome}: [${barra}${espacos}] ${progresso}%%"
    else
        echo -ne "\r\033[K‚Ä¢ üì¶ Instalando ${pacote_nome}: [\033[1;32mpronto\033[0m]\n"
    fi
}

  #INSTALA√á√ÉO DE PACOTES
# ========================
instalar_pacotes() {
    descricao="$1"
    shift
    pacotes=("$@")
    total=${#pacotes[@]}
    atual=0

    echo -e "\n${CYAN}$descricao${NC}"

    for pacote in "${pacotes[@]}"; do
        ((atual++))
        carregamentodepencias "$total" "$atual" "$pacote"
        pkg install -y "$pacote" > /dev/null 2>&1
        status=$?

        if [ $status -ne 0 ]; then
            echo -e "   ${RED}‚úñ ERRO CR√çTICO:${NC} N√£o foi poss√≠vel instalar o pacote '${pacote}'."
            echo -e "   ${YELLOW}‚ö† Verifique sua internet ou os reposit√≥rios do Termux.${NC}"
            echo -e "\n${RED}‚õî A instala√ß√£o foi interrompida.${NC}"
            esperar_enter
            exit 1
        fi
    done
}


# DESBLOQUEAR DPKG
#======================
desbloquear_dpkg() {
    echo -e "\nüîê \033[1;33mVERIFICANDO E DESBLOQUEANDO TRAVAS DO DPKG...\033[0m"

    trava="/data/data/com.termux/files/usr/var/lib/dpkg/lock-frontend"
    principal="/data/data/com.termux/files/usr/var/lib/dpkg/lock"

    pid_lock=$(lsof "$trava" 2>/dev/null | awk 'NR==2 {print $2}')
    pid_principal=$(lsof "$principal" 2>/dev/null | awk 'NR==2 {print $2}')

    if [ -n "$pid_lock" ]; then
        echo -e "‚Ä¢ \033[1;31mTrava detectada:\033[0m lock-frontend segurada pelo PID $pid_lock"
        echo -e "‚Ä¢ Encerrando processo $pid_lock..."
        kill -9 "$pid_lock" && echo -e "‚úî Processo $pid_lock encerrado com sucesso." || echo -e "‚úñ Falha ao encerrar processo."
    else
        echo -e "‚Ä¢ Nenhum processo ativo bloqueando lock-frontend."
    fi

    echo -e "‚Ä¢ Removendo lock-frontend..."
    rm -f "$trava" && echo -e "‚úî lock-frontend removido." || echo -e "‚úñ Erro ao remover lock-frontend."

    if [ -n "$pid_principal" ]; then
        echo -e "‚Ä¢ Trava detectada: lock principal segurada pelo PID $pid_principal"
        echo -e "‚Ä¢ Encerrando processo $pid_principal..."
        kill -9 "$pid_principal" && echo -e "‚úî Processo $pid_principal encerrado com sucesso." || echo -e "‚úñ Falha ao encerrar processo."
    else
        echo -e "‚Ä¢ Nenhum processo ativo bloqueando lock principal."
    fi

    echo -e "‚Ä¢ Removendo lock principal..."
    rm -f "$principal" && echo -e "‚úî lock principal removido." || echo -e "‚úñ Erro ao remover lock principal."

    echo -e "‚Ä¢ Executando dpkg --configure -a (modo autom√°tico)..."
    if DEBIAN_FRONTEND=noninteractive dpkg --force-confold --configure -a &>/dev/null; then
        echo -e "‚úî dpkg configurado com sucesso."
    else
        echo -e "‚úñ Erro ao configurar dpkg."
    fi

    sleep 1
    clear
}


     # ATUALIZAR PACOTES
# ========================
atualizar_pacotes() {
    desbloquear_dpkg
    echo -e "${CYAN}üì¶ Atualizando pacotes...${NC}"
    pkg update -y >/dev/null 2>&1
    pkg upgrade -y >/dev/null 2>&1
    pkg install ncurses-utils -y >/dev/null 2>&1
    echo -e "${GREEN}‚Ä¢ ‚úÖ Atualiza√ß√£o conclu√≠da.${NC}"
}

#
instalar_dependencias() {
    clear
    echo -e "${CYAN}üîß VERIFICANDO E INSTALANDO DEPEND√äNCIAS${NC}"
    minicarregamento

    dependencias=(git ssh curl wget nano vim unzip tar bash zsh gh)
    faltando=()

    for cmd in "${dependencias[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            faltando+=("$cmd")
        fi
    done

    if [ ${#faltando[@]} -eq 0 ]; then
        echo -e "${GREEN}‚Ä¢ ‚úÖ Todas as depend√™ncias j√° est√£o instaladas.${NC}"
        sleep 2
        return
    fi

    echo -e "${YELLOW}‚Ä¢ ‚ö†Ô∏è As seguintes depend√™ncias n√£o foram detectadas:${NC} ${faltando[*]}"
    echo ""

    desbloquear_dpkg

    instalar_pacotes "Instalando Conex√£o Remota" git openssh
    instalar_pacotes "Instalando Ferramentas" curl wget
    instalar_pacotes "Instalando Editores " nano vim
    instalar_pacotes "Instalando Compacta√ß√£o " unzip tar
    instalar_pacotes "Instalando Shells" bash zsh

    # Github CLI (gh)
   echo -e "${CYAN}\n Instalando Propriedade do Github${NC}"
echo -ne "‚Ä¢ üì¶ Instalando GitHub CLI (gh): "

pkg install -y gh > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo -e "[${YELLOW}falhou${NC}]"
    echo -e "${YELLOW}‚Ä¢ ‚ö†Ô∏è Pacote 'gh' n√£o encontrado no reposit√≥rio padr√£o. Tentando instalar via reposit√≥rio manual...${NC}"
    curl -s https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor > githubcli.gpg
    mv githubcli.gpg /data/data/com.termux/files/usr/etc/apt/trusted.gpg.d/githubcli.gpg
    echo "deb [arch=all] https://cli.github.com/packages stable main" > /data/data/com.termux/files/usr/etc/apt/sources.list.d/github-cli.list
    pkg update -y > /dev/null 2>&1
    pkg install -y gh > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo -e "[${GREEN}pronto${NC}]"
    else
        echo -e "[${RED}falhou${NC}]"
        echo -e "‚úñ N√£o foi poss√≠vel instalar o GitHub CLI."
        esperar_enter
        exit 1
    fi
else
    echo -e "[${GREEN}pronto${NC}]"
fi
    echo -e "\n${GREEN}‚Ä¢ ‚úÖ Todas as depend√™ncias foram instaladas com sucesso!${NC}"
    esperar_enter
}


#  CONFIGURAR GITHUB
# ========================
configurar_github() {
    clear
    echo -e "${CYAN}üîß CONFIGURAR GITHUB${NC}"
    minicarregamento

    if [[ -f "$ENV_FILE" ]]; then
        echo -e "${YELLOW}‚Ä¢ ‚ö†Ô∏è J√° existe um .env. Deseja sobrescrever? (s/n)${NC}"
        read -r resp
        if [[ "$resp" != "s" ]]; then
            clear
            echo -e "\n${GREEN}‚Ä¢ üëç Mantendo a configura√ß√£o atual.${NC}\n"
            esperar_enter
            return
        fi
    fi

    echo -e "${CYAN}Informe suas credenciais do GitHub:${NC}"
    read -p "Nome: " nome
    read -p "E-mail: " email
    read -p "Usu√°rio: " usuario
    read -p "Token Pessoal (PAT): " token

   
    # VERIFICAR OU GERAR SSH
    # ========================
    echo -e "${CYAN}Verificando chave SSH p√∫blica...${NC}"

    ssh_key=""
    if [[ -f ~/.ssh/id_ed25519.pub ]]; then
        ssh_key=$(cat ~/.ssh/id_ed25519.pub)
    elif [[ -f ~/.ssh/id_rsa.pub ]]; then
        ssh_key=$(cat ~/.ssh/id_rsa.pub)
    else
        echo -e "${YELLOW}‚Ä¢ ‚ö†Ô∏è Nenhuma chave SSH encontrada. Gerando uma nova...${NC}"
        ssh-keygen -t ed25519 -C "$email" -f ~/.ssh/id_ed25519 -N ""
        ssh_key=$(cat ~/.ssh/id_ed25519.pub)
        echo -e "${GREEN}‚Ä¢ ‚úÖ Nova chave SSH gerada.${NC}"
    fi

    echo -e "${CYAN}Sua chave SSH p√∫blica (adicione ao GitHub):${NC}"
    echo -e "${GREEN}$ssh_key${NC}"

    # salvar no .env
    echo "GIT_NAME=\"$nome\"" > "$ENV_FILE"
    echo "GIT_EMAIL=\"$email\"" >> "$ENV_FILE"
    echo "GH_USER=\"$usuario\"" >> "$ENV_FILE"
    echo "GH_TOKEN=\"$token\"" >> "$ENV_FILE"
    echo "SSH_KEY=\"$ssh_key\"" >> "$ENV_FILE"

    git config --global user.name "$nome"
    git config --global user.email "$email"

    echo -e "\n${GREEN}‚Ä¢ ‚úÖ GitHub configurado e salvo em $ENV_FILE.${NC}\n"
    esperar_enter
}



#  CRIAR REPOSIT√ìRIO
# ========================
criar_repositorio() {
    clear
    echo -e "${CYAN}üìÇ CRIAR E CONFIGURAR REPOSIT√ìRIO${NC}"
    

    echo -e "${CYAN}Nome do novo reposit√≥rio:${NC}"
    read -r repo
    echo -e "${CYAN}Ser√° privado? (s/n)${NC}"
    read -r priv
    [[ "$priv" == "s" ]] && vis="private" || vis="public"

    gh repo create "$repo" --"$vis" --confirm
    echo -e "${GREEN}‚Ä¢ ‚úÖ Reposit√≥rio '$repo' criado no GitHub!${NC}"
    esperar_enter
}


#  ENVIAR ARQUIVOS/PASTAS
# ========================
enviar_arquivos() {
    clear
    echo -e "${CYAN}üì§ ENVIAR ARQUIVOS/PASTAS AO REPOSIT√ìRIO${NC}"
    minicarregamento

    echo -e "${CYAN}‚Ä¢ üìÅ/üìÑ Qual arquivo ou pasta deseja enviar?${NC}"
    read -r arquivo

    echo -e "${CYAN}‚Ä¢ üìÅ Para qual reposit√≥rio no GitHub?${NC}"
    read -r repo

    if [ -f "$HOME/.env" ]; then
    gh_user=$(grep '^GH_USER=' "$HOME/.env" | cut -d '=' -f2- | tr -d '"')
elif [ -f ".env" ]; then
    gh_user=$(grep '^GH_USER=' ".env" | cut -d '=' -f2- | tr -d '"')
fi

if [ -n "$gh_user" ]; then
    echo -e "${CYAN}‚Ä¢ üîó Usu√°rio do GitHub detectado no .env: ${GREEN}$gh_user${NC}"
else
    echo -e "${CYAN}‚Ä¢ üë§ Qual seu usu√°rio do GitHub?${NC}"
    read -r gh_user
fi
    echo -e "${CYAN}‚Ä¢ üìù Deseja adicionar uma mensagem ao commit? (s/n)${NC}"
    read -r msg_resp
    msg="Update via script"
    if [[ "$msg_resp" == "s" ]]; then
        echo -e "${CYAN}‚Ä¢ ‚úèÔ∏è Digite a mensagem:${NC}"
        read -r msg
    fi

    echo -e "${CYAN}‚Ä¢ üîë Usar SSH? (s/n)${NC}"
    read -r ssh_resp

    cd ~ || exit

    if [ ! -d "$repo" ]; then
        mkdir "$repo"
        echo -e "${GREEN}‚Ä¢ üìÅ Criada pasta do reposit√≥rio: ~/$repo${NC}"
    fi

    cd "$repo" || exit

    if [ ! -d ".git" ]; then
        git init > /dev/null 2>&1
        echo -e "${GREEN}‚Ä¢ ‚úÖ Inicializado Git no reposit√≥rio${NC}"
    fi

    minicarregamento

    basename_arquivo=$(basename "$arquivo")
    if [ "$arquivo" != "$(pwd)/$basename_arquivo" ]; then
        if [ -f "$arquivo" ]; then
            mv "$arquivo" "./" 2>/dev/null || cp "$arquivo" "./"
            echo -e "${GREEN}‚Ä¢ üìÑ Arquivo movido/copied para dentro do reposit√≥rio${NC}"
        elif [ -d "$arquivo" ]; then
            mv "$arquivo" "./" 2>/dev/null || cp -r "$arquivo" "./"
            echo -e "${GREEN}‚Ä¢ üìÅ Pasta movida/copied para dentro do reposit√≥rio${NC}"
        else
            echo -e "${RED}‚Ä¢ ‚ùå Caminho inv√°lido.${NC}"
            esperar_enter
            return
        fi
    fi

    minicarregamento

    git add "$basename_arquivo"
    git commit -m "$msg" > /dev/null 2>&1

    if git remote | grep origin >/dev/null; then
        git remote remove origin
    fi

    if [[ "$ssh_resp" == "s" ]]; then
        git remote add origin "git@github.com:$gh_user/$repo.git"
    else
        git remote add origin "https://github.com/$gh_user/$repo.git"
    fi
    echo -e "${GREEN}‚Ä¢ üîó Remote origin configurado${NC}"

    git branch -M main > /dev/null 2>&1

    minicarregamento

    echo -e "${CYAN}‚Ä¢ üîÑ Sincronizando altera√ß√µes com o reposit√≥rio remoto...${NC}"
    git pull origin main --rebase > /dev/null 2>&1

    echo -e "${CYAN}‚Ä¢ üöÄ Enviando altera√ß√µes para o GitHub...${NC}"
    git push -u origin main > /dev/null 2>&1

    echo -e "${GREEN}‚Ä¢ ‚úÖ Arquivo/Pasta '$arquivo' enviado ao reposit√≥rio '$repo' com sucesso.${NC}"
    esperar_enter
}



# CRIAR README.md
# ========================
criar_readme() {
    clear
    echo -e "${CYAN}‚Ä¢ üìù CRIAR README.md PERSONALIZADO${NC}"
    minicarregamento

    nano README.md
    echo -e "${CYAN}Para qual reposit√≥rio deseja enviar o README?${NC}"
    read -r repo

    git init > /dev/null 2>&1
    git remote add origin "git@github.com:$GH_USER/$repo.git"
    git add README.md > /dev/null 2>&1
    git commit -m "Add README.md" > /dev/null 2>&1
    git branch -M main > /dev/null 2>&1
    git push -u origin main > /dev/null 2>&1

    echo -e "${GREEN}‚Ä¢ ‚úÖ README.md criado e enviado para '$repo'.${NC}"
    esperar_enter
}



#  CRIAR LICENSE  MIT
# ========================
criar_license() {
    clear
    echo -e "${CYAN}üìÑ CRIAR LICENSE MIT${NC}"
    carregamento
    clear

    source "$ENV_FILE"
    ano=$(date +"%Y")

cat > LICENSE <<EOF
MIT License

Copyright (c) $ano $GIT_NAME

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
EOF

    echo -e "${CYAN}‚Ä¢ üì¶ Para qual reposit√≥rio deseja enviar o LICENSE?${NC}"
    read -r repo

    [ ! -d ".git" ] && git init > /dev/null 2>&1
    git remote get-url origin >/dev/null 2>&1 || git remote add origin "git@github.com:$GH_USER/$repo.git"

    git add LICENSE 
    git diff --cached --quiet || git commit -m "Add LICENSE" > /dev/null 2>&1
    git branch -M main > /dev/null 2>&1

    echo -e "${YELLOW}‚Ä¢ üîÑ Sincronizando com o remoto...${NC}"
    if git pull origin main --rebase > /dev/null 2>&1; then
        echo -e "${GREEN}‚Ä¢ ‚úÖ Sincronizado com sucesso.${NC}"
    else
        echo -e "${RED}‚Ä¢ ‚ùå Conflitos detectados. Corrija e execute novamente.${NC}"
        esperar_enter
        return 1
    fi

    echo -e "${YELLOW}‚Ä¢ üöÄ Enviando LICENSE para GitHub...${NC}"
    if git push -u origin main > /dev/null 2>&1; then
        echo -e "${GREEN}‚Ä¢ ‚úÖ LICENSE criada e enviada para '$repo'.${NC}"
    else
        echo -e "${RED}‚Ä¢ ‚ùå Falha ao enviar LICENSE.${NC}"
    fi

    esperar_enter
}



#  MOSTRAR .ENV & SSH
# ========================
mostrar_env_ssh() {
    clear
    echo -e "${CYAN}üîç MOSTRAR .env E CHAVE SSH${NC}"
    minicarregamento

    if [[ -f "$ENV_FILE" ]]; then
        echo -e "${CYAN}‚Ä¢ Conte√∫do do arquivo ${YELLOW}$ENV_FILE${NC}${CYAN}:${NC}\n"
        cat "$ENV_FILE"
    else
        echo -e "${RED}‚Ä¢ ‚ùå Configura√ß√£o no GitHub n√£o realizada.${NC}"
    fi
    esperar_enter
}



# CHECK-UP GERAL
# ========================
checkup() {
    clear
    echo -e "${CYAN}‚úÖ CHECK-UP GERAL${NC}"

    carregamento forcar

    printf "\033[1A\033[2K"

    echo -e "${CYAN}‚Ä¢ Git:${ORANGE} $(git --version)${NC}"

    echo -ne "${CYAN}‚Ä¢ GitHub CLI:${NC} "
    if command -v gh >/dev/null 2>&1; then
        gh_version=$(gh --version | head -n1)
        echo -e "${ORANGE}${gh_version}${NC}"
    else
        echo -e "${RED}‚ùå GitHub CLI (gh) n√£o est√° instalado.${NC}"
        esperar_enter
        return
    fi

    echo -e "${CYAN}‚Ä¢ Autentica√ß√£o no GitHub CLI:${NC}"
    if gh auth status >/dev/null 2>&1; then
        echo -e "${GREEN}‚Ä¢ ‚úÖ Autenticado no GitHub CLI.${NC}"
    else
        echo -e "${RED}‚Ä¢ ‚ö†Ô∏è N√ÉO autenticado no GitHub CLI.${NC}"
        echo -ne "${YELLOW}\n ‚Ä¢ Deseja fazer login agora? (s/n): ${NC}"
        read -r resp
        if [[ "$resp" =~ ^[sS]$ ]]; then
            gh auth login
            if gh auth status >/dev/null 2>&1; then
                echo -e "${GREEN}‚Ä¢ ‚úÖ Login realizado com sucesso!${NC}"
            else
                echo -e "${RED}‚Ä¢ ‚ùå Falha ao autenticar.${NC}"
            fi
        else
            echo -e "${YELLOW}‚Ä¢ ‚ö†Ô∏è Login n√£o realizado. Algumas fun√ß√µes podem n√£o funcionar.${NC}"
        fi
    fi

    echo -e "${CYAN}‚Ä¢ Status da conex√£o SSH:${NC}"
    ssh_output=$(ssh -T git@github.com 2>&1)
    if echo "$ssh_output" | grep -qi "successfully authenticated"; then
        echo -e "${GREEN}‚Ä¢ ‚úÖ SSH autenticada com sucesso!${NC}"
    else
        echo -e "${RED}‚Ä¢ ‚ö†Ô∏è SSH n√£o autenticada.${NC}"
        echo -e "${YELLOW}‚Ä¢ Adicione sua chave p√∫blica SSH √† sua conta do GitHub.${NC}"
    fi

    echo -e "\n${GREEN}‚Ä¢ ‚úÖ Check-up conclu√≠do.${NC}"
    esperar_enter
}


# ATUALIZAR MENU / SCRIPT
# ========================
atualizar_menu() {
    clear
    carregamento forcar
    echo -e "${CYAN}‚Ä¢ üîÑ Verificando atualiza√ß√£o do script...${NC}"

    verificar_versao
    printf "\033[1A\033[2K"


    if [[ "$nova_versao_disponivel" == true ]]; then
        echo -e "${GREEN}‚Ä¢ Nova vers√£o dispon√≠vel: $remote_version${NC}\n"
        echo -e "${YELLOW}‚Ä¢ Sua vers√£o atual: $VERSAO_LOCAL${NC}\n"
        echo -ne "${YELLOW}‚Ä¢ Deseja atualizar agora? (s/n): ${NC}"
        read -r resp
        if [[ "$resp" =~ ^[Ss]$ ]]; then
            TMP_FILE=$(mktemp)
            if curl -fsSL -o "$TMP_FILE" "https://raw.githubusercontent.com/Shazanxz/G-Hub/main/ghub.sh"; then
                chmod +x "$TMP_FILE"
                echo -e "${GREEN}‚Ä¢ Script baixado com sucesso. Atualizando...${NC}\n"
                mv "$TMP_FILE" "$0"

                # Atualiza version.txt local para o remoto
                echo "$remote_version" > version.txt

                chmod +x "$0"
                echo -e "${YELLOW}‚Ä¢ Reiniciando script...${NC}"
                sleep 1
                exec "$0"
            else
                echo -e "${RED}‚Ä¢ Falha ao baixar a nova vers√£o.${NC}"
                rm -f "$TMP_FILE"
            fi
        else
            echo -e "${YELLOW}‚Ä¢ Atualiza√ß√£o cancelada. Voc√™ continuar√° vendo que h√° uma nova vers√£o dispon√≠vel.${NC}\n"
        fi
    else
        echo -e "${GREEN}‚Ä¢ Voc√™ j√° est√° com a vers√£o mais recente:${ORANGE} (${VERSAO_LOCAL})${NC}\n"
    fi
  
    esperar_enter
}


# VERIFICAR VERS√ÉO
# ========================
verificar_versao() {
    remote_version=$(curl -sSfL "https://raw.githubusercontent.com/Shazanxz/G-Hub/main/version.txt" 2>/dev/null)
    remote_version=$(echo "$remote_version" | tr -d '\r\n ')

    if [[ -z "$remote_version" ]]; then
        nova_versao_disponivel=false
        return
    fi

    if [[ "$remote_version" != "$VERSAO_LOCAL" ]]; then
        nova_versao_disponivel=true
    else
        nova_versao_disponivel=false
    fi
}



# MENU
# ========================
mostrar_menu() {
    clear
    desenhar

    # centralizar texto vers√£o
    pad_version=$(( (term_width - 12 - ${#VERSAO}) / 2 ))
    printf "%*s" "$pad_version" ""
    echo -e "Vers√£o: ${GREEN}${VERSAO_LOCAL}${NC}\n"

    if [ "$nova_versao_disponivel" = true ]; then
        pad_update=$(( (term_width - 42) / 2 ))
        printf "%*s" "$pad_update" ""
        echo -e "${YELLOW}üÜï Nova vers√£o dispon√≠vel! Use [8] para atualizar.${NC}\n"
    fi

    pad_menu=$(( (term_width - 36) / 2 ))
    printf "%*s" "$pad_menu" ""
    echo -e "1 - Configurar GitHub üîß"
    printf "%*s" "$pad_menu" ""
    echo -e "2 - Criar e Configurar Reposit√≥rio üìÅ"
    printf "%*s" "$pad_menu" ""
    echo -e "3 - Enviar Arquivos/Pastas üì§"
    printf "%*s" "$pad_menu" ""
    echo -e "4 - Criar README.md Personalizado üìù"
    printf "%*s" "$pad_menu" ""
    echo -e "5 - Criar LICENSE [MIT] üìÑ"
    printf "%*s" "$pad_menu" ""
    echo -e "6 - Mostrar .env e SSH üîç"
    printf "%*s" "$pad_menu" ""
    echo -e "7 - Check-up Geral ‚úÖ"
    printf "%*s" "$pad_menu" ""
    echo -e "8 - Verificar Atualiza√ß√£o üîÑ"
    printf "%*s" "$pad_menu" ""
    echo -e "0 - Sair üëã"
    echo ""
}



#  TELA DE CARREGAMENTO
# ========================
carregamento() {
    if [ "$carregamento_exibido" = true ] && [ "$1" != "forcar" ]; then
        return
    fi

    clear
    desenhar

    bar=""
    total_blocks=10
    bar_width=20
    texto_fixo="‚Ä¢ Carregando: [                    ]" 

    pad=$(( (term_width - ${#texto_fixo}) / 2 ))

    echo ""
    for i in $(seq 1 $total_blocks); do
        bar+="# "
        printf "%*s" "$pad" ""
        printf "‚Ä¢ Carregando: ["
        printf "${YELLOW}%-20s${NC}" "$bar"
        printf "]\r"
        sleep 0.2
    done

    printf "%*s" "$pad" ""
    printf "%-${#texto_fixo}s\r" " "

    mensagem_final="‚Ä¢ ‚úÖ Conclu√≠do!"
    pad_final=$(( (term_width - ${#mensagem_final}) / 2 ))
    printf "%*s" "$pad_final" ""
    echo -e "${GREEN}${mensagem_final}${NC}"
    sleep 1.2

    printf "\033[1A\033[2K"

    if [ "$1" != "forcar" ]; then
        carregamento_exibido=true
    fi
}



# TELA DE CARREGAMENTO DEV
#===========================
carregamento_dev() {
    clear
    desenhar

    pad=$(( (term_width - 36) / 2 ))
    printf "%*s" "$pad" ""
    echo -e "${GREEN}‚Ä¢ Desenvolvido por:${NC} ${YELLOW}Shazanxz${NC}"
    sleep 0.8

    printf "%*s" "$pad" ""
    echo -e "${GREEN}‚Ä¢ GitHub:${NC} ${RED}https://github.com/Shazanxz${NC}"
    sleep 0.8

    printf "%*s" "$pad" ""
    echo -e "${GREEN}‚Ä¢ Vers√£o:${NC} ${CYAN}$VERSAO_LOCAL${NC}"
    sleep 0.8

    echo ""
    mensagem_final="‚Ä¢ ‚úÖ Conclu√≠do!"
    pad_final=$(( (term_width - ${#mensagem_final}) / 2 ))
    printf "%*s" "$pad_final" ""
    echo -e "${GREEN}${mensagem_final}${NC}"
    sleep 1.5
    printf "\033[1A\033[2K"

       esperar_enter

}


# INICIALIZA√á√ÉO ANTES DO LOOP
# ========================

minicarregamento
desbloquear_dpkg > /dev/null 2>&1
atualizar_pacotes 
#instalar_dependencias #desabilitar para executar mais rapido/vscode
[[ -f "$ENV_FILE" ]] && source "$ENV_FILE"
ler_versao_local
verificar_versao
carregamento_dev



# LOOP PRINCIPAL
# ========================
while true; do

    mostrar_menu
    echo -ne "${YELLOW}Escolha sua op√ß√£o: ${NC}"
    read -e -p "" -r escolha
    case $escolha in
        1) configurar_github ;;
        2) criar_repositorio ;;
        3) enviar_arquivos ;;
        4) criar_readme ;;
        5) criar_license ;;
        6) mostrar_env_ssh ;;
        7) checkup ;;
        8) atualizar_menu ;;
        0) 
            clear
            desenhar
            sleep 1
            mensagem="üëã Obrigado por usar! At√© mais!"
            pad=$(( (term_width - ${#mensagem}) / 2 ))
            printf "%*s" "$pad" ""
            echo -e "${GREEN}${mensagem}${NC}"
            exit
            ;;
        *) 
            echo -e "${RED}‚Ä¢ ‚ùå Op√ß√£o inv√°lida!${NC}"
            sleep 1 
            ;;
    esac
done
